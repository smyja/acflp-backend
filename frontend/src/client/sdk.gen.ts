// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, TasksReadTasksData, TasksReadTasksResponse, TasksCreateTaskData, TasksCreateTaskResponse, TasksReadTaskData, TasksReadTaskResponse, TasksUpdateTaskData, TasksUpdateTaskResponse, TasksDeleteTaskData, TasksDeleteTaskResponse, TasksReadTaskSubmissionsData, TasksReadTaskSubmissionsResponse, TasksCreateTaskSubmissionData, TasksCreateTaskSubmissionResponse, TasksReadTaskSubmissionData, TasksReadTaskSubmissionResponse, TasksUpdateTaskSubmissionData, TasksUpdateTaskSubmissionResponse, TasksDeleteTaskSubmissionData, TasksDeleteTaskSubmissionResponse, TasksReadMySubmissionsData, TasksReadMySubmissionsResponse, TasksReadMyEarningsData, TasksReadMyEarningsResponse, TasksReadMyStatsResponse, TasksBulkImportTasksData, TasksBulkImportTasksResponse, TasksBulkImportTasksFromJsonlData, TasksBulkImportTasksFromJsonlResponse, TasksFlexibleBulkImportTasksData, TasksFlexibleBulkImportTasksResponse, TasksFlexibleBulkImportFromJsonlData, TasksFlexibleBulkImportFromJsonlResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TasksService {
    /**
     * Read Tasks
     * Retrieve available tasks for users to work on.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.taskType
     * @param data.language
     * @param data.status
     * @returns TasksPublic Successful Response
     * @throws ApiError
     */
    public static readTasks(data: TasksReadTasksData = {}): CancelablePromise<TasksReadTasksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/',
            query: {
                skip: data.skip,
                limit: data.limit,
                task_type: data.taskType,
                language: data.language,
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Task
     * Create new task. Only superusers can create tasks.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static createTask(data: TasksCreateTaskData): CancelablePromise<TasksCreateTaskResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task
     * Get task by ID.
     * @param data The data for the request.
     * @param data.taskId
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static readTask(data: TasksReadTaskData): CancelablePromise<TasksReadTaskResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/{task_id}',
            path: {
                task_id: data.taskId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Task
     * Update a task. Only superusers can update tasks.
     * @param data The data for the request.
     * @param data.taskId
     * @param data.requestBody
     * @returns TaskPublic Successful Response
     * @throws ApiError
     */
    public static updateTask(data: TasksUpdateTaskData): CancelablePromise<TasksUpdateTaskResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/tasks/{task_id}',
            path: {
                task_id: data.taskId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task
     * Delete a task. Only superusers can delete tasks.
     * @param data The data for the request.
     * @param data.taskId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTask(data: TasksDeleteTaskData): CancelablePromise<TasksDeleteTaskResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/tasks/{task_id}',
            path: {
                task_id: data.taskId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task Submissions
     * Get submissions for a specific task.
     * @param data The data for the request.
     * @param data.taskId
     * @param data.skip
     * @param data.limit
     * @param data.status
     * @returns TaskSubmissionsPublic Successful Response
     * @throws ApiError
     */
    public static readTaskSubmissions(data: TasksReadTaskSubmissionsData): CancelablePromise<TasksReadTaskSubmissionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/{task_id}/submissions',
            path: {
                task_id: data.taskId
            },
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Task Submission
     * Submit work for a task.
     * @param data The data for the request.
     * @param data.taskId
     * @param data.requestBody
     * @returns TaskSubmissionPublic Successful Response
     * @throws ApiError
     */
    public static createTaskSubmission(data: TasksCreateTaskSubmissionData): CancelablePromise<TasksCreateTaskSubmissionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/{task_id}/submissions',
            path: {
                task_id: data.taskId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Task Submission
     * Get submission by ID.
     * @param data The data for the request.
     * @param data.submissionId
     * @returns TaskSubmissionPublic Successful Response
     * @throws ApiError
     */
    public static readTaskSubmission(data: TasksReadTaskSubmissionData): CancelablePromise<TasksReadTaskSubmissionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/submissions/{submission_id}',
            path: {
                submission_id: data.submissionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Task Submission
     * Update a task submission. Users can update their own pending submissions,
     * superusers can review and approve/reject submissions.
     * @param data The data for the request.
     * @param data.submissionId
     * @param data.requestBody
     * @returns TaskSubmissionPublic Successful Response
     * @throws ApiError
     */
    public static updateTaskSubmission(data: TasksUpdateTaskSubmissionData): CancelablePromise<TasksUpdateTaskSubmissionResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/tasks/submissions/{submission_id}',
            path: {
                submission_id: data.submissionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task Submission
     * Delete a task submission. Only users can delete their own pending submissions.
     * @param data The data for the request.
     * @param data.submissionId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTaskSubmission(data: TasksDeleteTaskSubmissionData): CancelablePromise<TasksDeleteTaskSubmissionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/tasks/submissions/{submission_id}',
            path: {
                submission_id: data.submissionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read My Submissions
     * Get current user's task submissions.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.status
     * @returns TaskSubmissionsPublic Successful Response
     * @throws ApiError
     */
    public static readMySubmissions(data: TasksReadMySubmissionsData = {}): CancelablePromise<TasksReadMySubmissionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/my-submissions',
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read My Earnings
     * Get current user's earnings.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UserEarningsPublic Successful Response
     * @throws ApiError
     */
    public static readMyEarnings(data: TasksReadMyEarningsData = {}): CancelablePromise<TasksReadMyEarningsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/my-earnings',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read My Stats
     * Get current user's task statistics.
     * @returns UserStats Successful Response
     * @throws ApiError
     */
    public static readMyStats(): CancelablePromise<TasksReadMyStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tasks/my-stats'
        });
    }
    
    /**
     * Bulk Import Tasks
     * Bulk import tasks from a list of task items. Only superusers can import tasks.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns BulkTaskImportResponse Successful Response
     * @throws ApiError
     */
    public static bulkImportTasks(data: TasksBulkImportTasksData): CancelablePromise<TasksBulkImportTasksResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/bulk-import',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk Import Tasks From Jsonl
     * Bulk import tasks from a JSONL file. Only superusers can import tasks.
     * Each line should be a JSON object with task fields.
     * @param data The data for the request.
     * @param data.formData
     * @param data.defaultRewardAmount
     * @returns BulkTaskImportResponse Successful Response
     * @throws ApiError
     */
    public static bulkImportTasksFromJsonl(data: TasksBulkImportTasksFromJsonlData): CancelablePromise<TasksBulkImportTasksFromJsonlResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/bulk-import-jsonl',
            query: {
                default_reward_amount: data.defaultRewardAmount
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Flexible Bulk Import Tasks
     * Flexible bulk import from any JSONL format with field mapping.
     * Allows mapping any JSONL keys to task fields for maximum compatibility.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns FlexibleBulkImportResponse Successful Response
     * @throws ApiError
     */
    public static flexibleBulkImportTasks(data: TasksFlexibleBulkImportTasksData): CancelablePromise<TasksFlexibleBulkImportTasksResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/flexible-bulk-import',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Flexible Bulk Import From Jsonl
     * Flexible bulk import from JSONL file with custom field mapping.
     * Perfect for Hugging Face datasets and other JSONL formats.
     * @param data The data for the request.
     * @param data.contentField
     * @param data.formData
     * @param data.titleField
     * @param data.descriptionField
     * @param data.sourceLanguageField
     * @param data.targetLanguageField
     * @param data.taskTypeField
     * @param data.rewardAmountField
     * @param data.defaultTitle
     * @param data.defaultDescription
     * @param data.defaultSourceLanguage
     * @param data.defaultTargetLanguage
     * @param data.defaultTaskType
     * @param data.defaultRewardAmount
     * @returns FlexibleBulkImportResponse Successful Response
     * @throws ApiError
     */
    public static flexibleBulkImportFromJsonl(data: TasksFlexibleBulkImportFromJsonlData): CancelablePromise<TasksFlexibleBulkImportFromJsonlResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tasks/flexible-bulk-import-jsonl',
            query: {
                content_field: data.contentField,
                title_field: data.titleField,
                description_field: data.descriptionField,
                source_language_field: data.sourceLanguageField,
                target_language_field: data.targetLanguageField,
                task_type_field: data.taskTypeField,
                reward_amount_field: data.rewardAmountField,
                default_title: data.defaultTitle,
                default_description: data.defaultDescription,
                default_source_language: data.defaultSourceLanguage,
                default_target_language: data.defaultTargetLanguage,
                default_task_type: data.defaultTaskType,
                default_reward_amount: data.defaultRewardAmount
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}