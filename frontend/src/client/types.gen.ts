// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Language = 'bini' | 'urhobo' | 'igbo' | 'calabar';

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type SubmissionStatus = 'pending' | 'approved' | 'rejected';

export type TaskCreate = {
    title: string;
    description?: (string | null);
    task_type: string;
    source_language: string;
    target_language?: (string | null);
    content: string;
    reward_amount?: (number | string);
    max_submissions?: number;
    status?: string;
};

export type TaskPublic = {
    title: string;
    description?: (string | null);
    task_type: string;
    source_language: string;
    target_language?: (string | null);
    content: string;
    reward_amount?: string;
    max_submissions?: number;
    status?: string;
    id: string;
    created_at: string;
    updated_at: string;
    created_by_id: string;
    submission_count?: number;
};

export type TasksPublic = {
    data: Array<TaskPublic>;
    count: number;
};

export type TaskStatus = 'pending' | 'in_progress' | 'completed' | 'rejected';

export type TaskSubmissionCreate = {
    task_id: string;
    content?: (string | null);
    audio_file_url?: (string | null);
    notes?: (string | null);
};

export type TaskSubmissionPublic = {
    content?: (string | null);
    audio_file_url?: (string | null);
    notes?: (string | null);
    status?: string;
    id: string;
    task_id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
    reviewed_at: (string | null);
    reviewer_id: (string | null);
    reviewer_notes: (string | null);
};

export type TaskSubmissionsPublic = {
    data: Array<TaskSubmissionPublic>;
    count: number;
};

export type TaskSubmissionUpdate = {
    content?: (string | null);
    audio_file_url?: (string | null);
    notes?: (string | null);
    status?: (string | null);
    reviewer_notes?: (string | null);
};

export type TaskType = 'text_translation' | 'tts_recording';

export type TaskUpdate = {
    title?: (string | null);
    description?: (string | null);
    content?: (string | null);
    reward_amount?: (number | string | null);
    max_submissions?: (number | null);
    status?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserEarningPublic = {
    amount: string;
    description: string;
    id: string;
    user_id: string;
    submission_id: string;
    created_at: string;
};

export type UserEarningsPublic = {
    data: Array<UserEarningPublic>;
    count: number;
    total_earnings: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserStats = {
    total_earnings: string;
    total_submissions: number;
    approved_submissions: number;
    pending_submissions: number;
    rejected_submissions: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TasksReadTasksData = {
    language?: (Language | null);
    limit?: number;
    skip?: number;
    status?: (TaskStatus | null);
    taskType?: (TaskType | null);
};

export type TasksReadTasksResponse = (TasksPublic);

export type TasksCreateTaskData = {
    requestBody: TaskCreate;
};

export type TasksCreateTaskResponse = (TaskPublic);

export type TasksReadTaskData = {
    taskId: string;
};

export type TasksReadTaskResponse = (TaskPublic);

export type TasksUpdateTaskData = {
    requestBody: TaskUpdate;
    taskId: string;
};

export type TasksUpdateTaskResponse = (TaskPublic);

export type TasksDeleteTaskData = {
    taskId: string;
};

export type TasksDeleteTaskResponse = (Message);

export type TasksReadTaskSubmissionsData = {
    limit?: number;
    skip?: number;
    status?: (SubmissionStatus | null);
    taskId: string;
};

export type TasksReadTaskSubmissionsResponse = (TaskSubmissionsPublic);

export type TasksCreateTaskSubmissionData = {
    requestBody: TaskSubmissionCreate;
    taskId: string;
};

export type TasksCreateTaskSubmissionResponse = (TaskSubmissionPublic);

export type TasksReadTaskSubmissionData = {
    submissionId: string;
};

export type TasksReadTaskSubmissionResponse = (TaskSubmissionPublic);

export type TasksUpdateTaskSubmissionData = {
    requestBody: TaskSubmissionUpdate;
    submissionId: string;
};

export type TasksUpdateTaskSubmissionResponse = (TaskSubmissionPublic);

export type TasksDeleteTaskSubmissionData = {
    submissionId: string;
};

export type TasksDeleteTaskSubmissionResponse = (Message);

export type TasksReadMySubmissionsData = {
    limit?: number;
    skip?: number;
    status?: (SubmissionStatus | null);
};

export type TasksReadMySubmissionsResponse = (TaskSubmissionsPublic);

export type TasksReadMyEarningsData = {
    limit?: number;
    skip?: number;
};

export type TasksReadMyEarningsResponse = (UserEarningsPublic);

export type TasksReadMyStatsResponse = (UserStats);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);