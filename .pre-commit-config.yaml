# Enterprise Pre-commit Configuration
# Ensures code quality and consistency across the team

default_language_version:
  python: python3.11

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File formatting
      - id: trailing-whitespace
        exclude: ^tests/fixtures/
      - id: end-of-file-fixer
        exclude: ^tests/fixtures/
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-toml
      - id: check-json
      - id: pretty-format-json
        args: [--autofix, --no-sort-keys]
        exclude: ^tests/fixtures/

      # Security and best practices
      - id: check-added-large-files
        args: [--maxkb=1000]
        exclude: ^(.*\/dummy.*|.*\.json)$
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: destroyed-symlinks
      - id: detect-private-key

      # Python specific
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
        files: ^tests/.*\.py$
        types: [python]

      # Git specific
      - id: check-executables-have-shebangs
        exclude: ^(\.githooks/|scripts/coverage_report\.py$)
      - id: check-shebang-scripts-are-executable
        exclude: ^(\.githooks/|scripts/coverage_report\.py$)

  # Python code upgrade
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py311-plus]
        name: Upgrade code to Python 3.11+

  # Docstring formatting via managed python env
  - repo: local
    hooks:
      - id: docformatter
        name: docformatter
        entry: docformatter
        language: python
        additional_dependencies: ["docformatter==1.7.5"]
        types: [python]
        args: [--in-place, --wrap-summaries=115, --wrap-descriptions=120, --make-summary-multi-line]

  # Remove unused noqa comments
  - repo: https://github.com/asottile/yesqa
    rev: v1.5.0
    hooks:
      - id: yesqa
        name: Unused noqa

  # Ruff - Fast Python linter and formatter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        types_or: [python, pyi]
        exclude: ^tests/
        stages: [pre-commit, pre-push]
      - id: ruff-format
        types_or: [python, pyi]
        stages: [pre-commit, pre-push]

  # Documentation formatting
  - repo: https://github.com/asottile/blacken-docs
    rev: 1.16.0
    hooks:
      - id: blacken-docs
        args: [--line-length=120]
        stages: [manual]
        exclude: ^README\.md$

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        description: Static type checking with mypy
        additional_dependencies:
          - types-requests
          - types-redis
          - types-python-dateutil
          - sqlalchemy[mypy]
        args:
          - '--ignore-missing-imports'
          - '--disallow-untyped-defs'
          - '--no-implicit-optional'
          - '--warn-redundant-casts'
          - '--warn-unused-ignores'
        files: ^src/
        exclude: ^tests/
        stages: [manual]

  # Security linting with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        description: Security linting with bandit
        args: ['-r', 'src/', '-f', 'json', '--skip', 'B101']
        additional_dependencies: ["bandit[toml]"]
        files: ^src/
        exclude: ^tests/
        stages: [manual]

  # Safety - Check for known security vulnerabilities
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: pyproject.toml
        stages: [manual]
        additional_dependencies: ["safety==2.3.5"]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        description: Lint Dockerfiles
        args: [--ignore, DL3008, --ignore, DL3009]
        files: Dockerfile.*
        stages: [manual]

  # Markdown formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm
          - mdformat-frontmatter
          - mdformat-myst
        args: ["--wrap", "no"]
        exclude: (CHANGELOG\.md|README\.md)
        stages: [manual]

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args:
          - --format
          - parsable
          - --strict
        exclude: ^\.pre-commit-config\.yaml$
        stages: [manual]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: ^(tests/fixtures/|.*\.lock$)
        stages: [manual]

  # Documentation style
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        additional_dependencies: [tomli]
        args: [--config=pyproject.toml]
        files: ^src/

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Fast unit tests on pre-commit
      - id: pytest-unit
        name: pytest-unit
        description: Run fast unit tests
        entry: pytest
        args: ['-m', 'unit', '--tb=short', '-q', '--maxfail=3']
        language: system
        types: [python]
        pass_filenames: false
        stages: [manual]

      # Comprehensive tests on pre-push
      - id: pytest-coverage
        name: pytest-coverage
        description: Run tests with coverage check
        entry: pytest
        args: ['--cov=src/app', '--cov-fail-under=80', '--cov-report=term-missing:skip-covered', '--tb=short', '-q']
        language: system
        types: [python]
        pass_filenames: false
        stages: [manual]

      # Security tests
      - id: security-tests
        name: security-tests
        description: Run security-related tests
        entry: pytest
        args: ['-m', 'auth or security', '--tb=short', '-q']
        language: system
        types: [python]
        pass_filenames: false
        stages: [manual]

      # API schema validation
      - id: api-schema-check
        name: API Schema Validation
        entry: python
        language: system
        args: [-c, "from app.main import app; import json; schema = app.openapi(); print('âœ… API schema is valid')"]
        files: ^src/app/
        pass_filenames: false
        stages: [manual]

# Global configuration
default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: 3.7.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
