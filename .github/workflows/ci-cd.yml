name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE.md'

env:
  PYTHON_VERSION: '3.11'
  IMAGE_NAME: acflp-backend
  REGISTRY: ghcr.io

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install uv
      run: pip install uv
    
    - name: Create venv and install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]"
    
    - name: Run Ruff linting
      run: uv run ruff check src --output-format=github
    
    - name: Run Ruff formatting check
      run: uv run ruff format src --check
    
    # - name: Run mypy type checking
    #   run: uv run mypy src --config-file pyproject.toml
    #   env:
    #     ENVIRONMENT: local
    #     SECRET_KEY: test-secret-key-for-testing-only

  # CodeQL Security Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv venv
        uv pip install -e ".[dev]"
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Comprehensive Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: web_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install uv
      run: pip install uv
    
    - name: Create venv and install dependencies
      run: |
        uv venv
        uv pip install -e ".[dev]"
    
    - name: Install redis-tools
      run: sudo apt-get update && sudo apt-get install -y redis-tools
    
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
    
    - name: Run tests with coverage
      run: |
        uv run pytest tests/ \
          --cov=src/app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --junitxml=pytest-results.xml \
          -v
      env:
        ENVIRONMENT: local
        SECRET_KEY: test-secret-key-for-testing-only
        POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/web_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_SERVER: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: web_test
        REDIS_CACHE_URL: redis://localhost:6379/0
        REDIS_QUEUE_URL: redis://localhost:6379/1
        REDIS_RATE_LIMIT_URL: redis://localhost:6379/2
    
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml

  # Docker Build and Security Scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && (contains(github.event.pull_request.changed_files, 'Dockerfile') || contains(github.event.pull_request.changed_files, 'src/')))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:test
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: needs.docker.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to be ready
    
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml exec -T web pytest tests/integration/ -v
    
    - name: Collect logs
      if: failure()
      run: |
        docker-compose -f docker-compose.test.yml logs
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/main' && needs.integration.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install performance testing tools
      run: |
        pip install locust pytest-benchmark
    
    - name: Run performance tests
      run: |
        # Add performance test commands here
        echo "Performance tests would run here"

  # Build and Push to Registry (only on main branch)
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [code-quality, codeql, test, docker, integration]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' && 
      needs.code-quality.result == 'success' && 
      needs.codeql.result == 'success' && 
      needs.test.result == 'success' && 
      (needs.docker.result == 'success' || needs.docker.result == 'skipped') && 
      (needs.integration.result == 'success' || needs.integration.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploy to staging environment"
        # Add staging deployment commands here
    
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploy to production environment"
        # Add production deployment commands here

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [code-quality, codeql, test, docker, integration, performance, deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add success notification logic (Slack, email, etc.)
    
    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification logic (Slack, email, etc.)
