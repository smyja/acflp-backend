[project]
name = "fastapi-boilerplate"
version = "0.1.0"
description = "A fully Async FastAPI boilerplate using SQLAlchemy and Pydantic 2"
authors = [{ name = "Igor Magalhaes", email = "igor.magalhaes.r@gmail.com" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = "~=3.11"
dependencies = [
    "python-dotenv>=1.0.0",
    "pydantic[email]>=2.6.1",
    "fastapi>=0.109.1",
    "uvicorn>=0.27.0",
    "uvloop>=0.19.0",
    "httptools>=0.6.1",
    "uuid>=1.30",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "SQLAlchemy-Utils>=0.41.1",
    "python-jose>=3.3.0",
    "SQLAlchemy>=2.0.25",
    "python-multipart>=0.0.9",
    "greenlet>=2.0.2",
    "httpx>=0.26.0",
    "pydantic-settings>=2.0.3",
    "redis>=5.0.1",
    "arq>=0.25.0",
    "bcrypt>=4.1.1",
    "psycopg2-binary>=2.9.9",
    "fastcrud>=0.15.5",
    "crudadmin>=0.4.2",
    "gunicorn>=23.0.0",
    "ruff>=0.11.13",
    "mypy>=1.16.0",
    "fastapi-sso>=0.15.0",
]

[dependency-groups]
dev = [
    "pytest>=7.4.2",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=4.1.0",
    "faker>=26.0.0",
    "mypy>=1.8.0",
    "types-redis>=4.6.0",
    "ruff>=0.1.0",
    "httpx>=0.26.0",
    "fastapi>=0.116.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.10.0",
    "crudadmin>=0.4.2",
    "asyncpg>=0.30.0",
    "python-jose>=3.5.0",
    "bcrypt>=4.3.0",
    "arq>=0.26.0",
    "fastapi-sso>=0.15.0",
    "bandit>=1.7.5",
    "safety>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["src/"]

[tool.hatch.build.targets.wheel]
include = ["src/"]
packages = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true
src = ["src"]

[tool.ruff.lint]
select = [
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F", # Pyflakes
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E", # pycodestyle
    "W", # Warning
    # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    # https://docs.astral.sh/ruff/rules/#mccabe-c90
    "C", # Complexity (mccabe+) & comprehensions
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP", # pyupgrade
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I", # isort
    # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "S", # flake8-bandit (security)
    # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "B", # flake8-bugbear
    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SIM", # flake8-simplify
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "N", # pep8-naming
]
ignore = [
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E402", # module level import not at top of file
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP006", # use-pep585-annotation
    "UP007", # use-pep604-annotation
    "E741",  # Ambiguous variable name
    # Security exceptions for test files
    "S101", # Use of assert detected (needed for tests)
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    # "UP035", # deprecated-assertion
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Use of assert detected
    "S106", # Possible hardcoded password
    "S108", # Probable insecure usage of temp file/directory
]
"__init__.py" = [
    "F401", # unused import
    "F403", # star imports
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true

# Coverage configuration
[tool.coverage.run]
source = ["src/app"]
omit = [
    "src/app/__init__.py",
    "src/app/core/config.py",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/alembic/*",
    "src/app/main.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
ignore_missing_imports = true
mypy_path = "src"
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "app.*"
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
color_output = true
error_summary = true

# MyPy path configuration
mypy_path = "src"
packages = ["app"]

[[tool.mypy.overrides]]
module = [
    "faker.*",
    "uvicorn.*",
    "gunicorn.*",
    "alembic.*",
    "sqlalchemy.*",
    "asyncpg.*",
    "redis.*",
    "arq.*",
    "crudadmin.*",
    "fastcrud.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --cov=src/app
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
    --asyncio-mode=auto
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "api: marks tests as API tests",
    "auth: marks tests as authentication tests",
    "database: marks tests as database tests",
    "cache: marks tests as cache tests",
    "external: marks tests as external service tests",
    "error: marks tests as error scenario tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Bandit security configuration
[tool.bandit]
skips = ["B101", "B601"]
exclude_dirs = ["tests", "migrations"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Pydocstyle configuration
[tool.pydocstyle]
inherit = false
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D200", # One-line docstring should fit on one line
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D214", # Section is over-indented
    "D215", # Section underline is over-indented
    "D404", # First word of the docstring should not be This
    "D405", # Section name should be properly capitalized
    "D406", # Section name should end with a newline
    "D407", # Missing dashed underline after section
    "D408", # Section underline should be in the line following the section's name
    "D409", # Section underline should match the length of its name
    "D410", # Missing blank line after section
    "D411", # Missing blank line before section
    "D413", # Missing blank line after last section
    "D415", # First line should end with a period, question mark, or exclamation point
    "D416", # Section name should end with a colon
]
match = "(?!test_).*\\.py"
match_dir = "(?!tests).*"
convention = "google"

# Safety configuration
[tool.safety]
# Ignore specific vulnerabilities if needed
# ignore = ["12345"]
full_report = true
short_report = false
output = "json"

# Additional development tools configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/app/__init__.py:__version__"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
