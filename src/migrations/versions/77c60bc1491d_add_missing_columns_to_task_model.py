"""Add missing columns to task model

Revision ID: 77c60bc1491d
Revises:
Create Date: 2025-08-30 22:42:31.238776

"""

from collections.abc import Sequence
from contextlib import suppress
from typing import Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "77c60bc1491d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Defensive, idempotent upgrade to ease alignment across environments
    connection = op.get_bind()
    inspector = sa.inspect(connection)

    table_names = set(inspector.get_table_names())

    # Drop legacy token_blacklist if present
    if "token_blacklist" in table_names:
        indexes = inspector.get_indexes("token_blacklist")
        index_names = {idx["name"] for idx in indexes}
        if op.f("ix_token_blacklist_token") in index_names or "ix_token_blacklist_token" in index_names:
            with suppress(Exception):
                op.drop_index(op.f("ix_token_blacklist_token"), table_name="token_blacklist")
        with suppress(Exception):
            op.drop_table("token_blacklist")

    # Ensure unique constraint on rate_limit.id if table exists and constraint is missing
    if "rate_limit" in table_names:
        with suppress(Exception):
            op.create_unique_constraint(None, "rate_limit", ["id"])

    # Add missing task columns and indexes if absent
    if "task" in table_names:
        existing_cols = {col["name"] for col in inspector.get_columns("task")}
        if "assignee_id" not in existing_cols:
            op.add_column("task", sa.Column("assignee_id", sa.Integer(), nullable=True))
        if "translated_by_user_id" not in existing_cols:
            op.add_column("task", sa.Column("translated_by_user_id", sa.Integer(), nullable=True))
        if "translated_text" not in existing_cols:
            op.add_column("task", sa.Column("translated_text", sa.String(length=63206), nullable=True))
        if "translated_at" not in existing_cols:
            op.add_column("task", sa.Column("translated_at", sa.DateTime(timezone=True), nullable=True))

        # Indexes (skip if they exist)
        existing_indexes = {idx["name"] for idx in inspector.get_indexes("task")}
        ix_assignee = op.f("ix_task_assignee_id")
        if ix_assignee not in existing_indexes:
            with suppress(Exception):
                op.create_index(ix_assignee, "task", ["assignee_id"], unique=False)
        ix_translated_by = op.f("ix_task_translated_by_user_id")
        if ix_translated_by not in existing_indexes:
            with suppress(Exception):
                op.create_index(ix_translated_by, "task", ["translated_by_user_id"], unique=False)

        # Foreign keys (attempt create; ignore if they already exist)
        with suppress(Exception):
            op.create_foreign_key(None, "task", "user", ["assignee_id"], ["id"])
        with suppress(Exception):
            op.create_foreign_key(None, "task", "user", ["translated_by_user_id"], ["id"])

    # Unique constraint on tier.id if table exists
    if "tier" in table_names:
        with suppress(Exception):
            op.create_unique_constraint(None, "tier", ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("tier_id_key", "tier", type_="unique")
    op.drop_constraint("task_assignee_id_fkey", "task", type_="foreignkey")
    op.drop_constraint("task_translated_by_user_id_fkey", "task", type_="foreignkey")
    op.drop_index(op.f("ix_task_translated_by_user_id"), table_name="task")
    op.drop_index(op.f("ix_task_assignee_id"), table_name="task")
    op.drop_column("task", "translated_at")
    op.drop_column("task", "translated_text")
    op.drop_column("task", "translated_by_user_id")
    op.drop_column("task", "assignee_id")
    op.drop_constraint("rate_limit_id_key", "rate_limit", type_="unique")
    op.create_table(
        "token_blacklist",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("token", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("expires_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("token_blacklist_pkey")),
    )
    op.create_index(op.f("ix_token_blacklist_token"), "token_blacklist", ["token"], unique=True)

    # ### end Alembic commands ###
